version: '3.4'
services:
  flask_devserver:
    build: 
      context: ./flask-app
      dockerfile: Dockerfile-devserver
    container_name: flask-devserver
    environment:
     - APP_NAME=MyFlaskApp
     - POSTGRES_USER=${POSTGRES_U}
     - POSTGRES_PASSWORD=${POSTGRES_PW}
     - POSTGRES_DB=${POSTGRES_DATABASE}
     - POSTGRES_CONTAINERNAME=postgresql-devserver
     - POSTGRES_PORT=8090
    ports:
     - "8080:8080"
    depends_on:
      db_devserver:
        condition: service_healthy

  flask_wsgi:
    build: 
      context: ./flask-app
      dockerfile: Dockerfile-wsgi
    container_name: flask-wsgi
    environment:
     - APP_NAME=MyFlaskApp
     - POSTGRES_USER=${POSTGRES_U}
     - POSTGRES_PASSWORD=${POSTGRES_PW}
     - POSTGRES_DB=${POSTGRES_DATABASE}
     - POSTGRES_CONTAINERNAME=postgresql-wsgi
     - POSTGRES_PORT=8091
    ports:
     - "8081:8081"
    depends_on:
      db_wsgi:
        condition: service_healthy

  k6:
    build: ./k6-loadtester
    depends_on:
      flask_devserver:
        condition: service_started
    environment:
      - K6_OUT=xk6-influxdb=http://influxdb:8086
      - K6_INFLUXDB_ORGANIZATION=application_loadtesting
      - K6_INFLUXDB_BUCKET=loadtest
      - K6_INFLUXDB_INSECURE=true
        # NOTE: This is an Admin token, it's not suggested to use this configuration in production.
        # Instead, use a Token with restricted privileges.
      - K6_INFLUXDB_TOKEN=${INFLUX_DB_ADMIN_TOKEN}

  db_devserver:
    image: postgres:16.3-alpine
    restart: always
    container_name: postgresql-devserver
    environment:
      - POSTGRES_USER=${POSTGRES_U}
      - POSTGRES_PASSWORD=${POSTGRES_PW}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - PGPORT=8090
    expose:
      - '8090'
    volumes:
      - ./postgres-db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_U} -d ${POSTGRES_DATABASE}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  
  db_wsgi:
    image: postgres:16.3-alpine
    restart: always
    container_name: postgresql-wsgi
    environment:
      - POSTGRES_USER=${POSTGRES_U}
      - POSTGRES_PASSWORD=${POSTGRES_PW}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - PGPORT=8091
    expose:
      - '8091'
    volumes:
      - ./postgres-db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_U} -d ${POSTGRES_DATABASE}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  
  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - INFLUXDB_DB=k6
      - DOCKER_INFLUXDB_INIT_ORG=application_loadtesting
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_DB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_DB_PW}
      - DOCKER_INFLUXDB_INIT_BUCKET=loadtest
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_DB_ADMIN_TOKEN}
